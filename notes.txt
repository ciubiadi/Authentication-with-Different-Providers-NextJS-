How to create Authentication system functionalities with NextJS
FOR SIGN IN
1. In app/api/auth/[...nextauth]/route.js :
 - Build the authOptions object with providers property which will be an array with providers
 - Pass the object(authOptions in this case) to MextAuth function from next-auth/next and export it as GET and POST
2. Build an .env file within the app root folder and provide the GOOGLE_CLIENT_ID AND GOOGLE_CLIENT_SECRET (credentials generated from Google Console ). 
Also, create the variables NEXTAUTH_URL and NEXTAUTH_SECRET
- Use the GOOGLE_CLIENT_ID and GOOGLE_CLIENT_SECRET in the object with providers (authOptions) 
3. Wrap the app around <SessionProvider<SessionProvider/> from next-auth/react
4. Add Sign In capability on a Sign In button:
- add onClick method on button and use signIn from next-auth/react

FOR SIGN OUT
5. use the signIn, signOut, useSessionfrom next-auth/react and invoke signIn and signOut from onClick 

RENDER USER DETAILS
6. To render the image I need to add in nextConfig the image 

MONGODB CONNECTION
7. Access MongoDB and configure it:
- create a Cluster and get username and password for Database Access. 
Store username and password in .env
- Add 0.0.0.0/0 address to Network Access
8. Connect to the Cluster and create MONGODB_URI env variable.
9. Create the mongoose connection using the MONGODB_URI
10. Create the User model with Schema, models from 'mongoose', and export the models.User || mongoose.model
11. Send a POST request with a test name and email. (Optionally, check the api with postman.)
12. Browse the collection in mongodb,and the user will be found
13. Add the callbacks propery in authOptions object with the signIn and signOut functions in route.js
